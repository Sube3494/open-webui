{"version":3,"file":"index.BqVLHKQO.js","sources":["../../../../../../src/lib/apis/index.ts"],"sourcesContent":["import { WEBUI_API_BASE_URL, WEBUI_BASE_URL } from '$lib/constants';\r\nimport { getOpenAIModelsDirect } from './openai';\r\n\r\nexport const getModels = async (\r\n\ttoken: string = '',\r\n\tconnections: object | null = null,\r\n\tbase: boolean = false\r\n) => {\r\n\tlet error = null;\r\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/models${base ? '/base' : ''}`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\terror = err;\r\n\t\t\tconsole.log(err);\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\tlet models = res?.data ?? [];\r\n\r\n\tif (connections && !base) {\r\n\t\tlet localModels = [];\r\n\r\n\t\tif (connections) {\r\n\t\t\tconst OPENAI_API_BASE_URLS = connections.OPENAI_API_BASE_URLS;\r\n\t\t\tconst OPENAI_API_KEYS = connections.OPENAI_API_KEYS;\r\n\t\t\tconst OPENAI_API_CONFIGS = connections.OPENAI_API_CONFIGS;\r\n\r\n\t\t\tconst requests = [];\r\n\t\t\tfor (const idx in OPENAI_API_BASE_URLS) {\r\n\t\t\t\tconst url = OPENAI_API_BASE_URLS[idx];\r\n\r\n\t\t\t\tif (idx.toString() in OPENAI_API_CONFIGS) {\r\n\t\t\t\t\tconst apiConfig = OPENAI_API_CONFIGS[idx.toString()] ?? {};\r\n\r\n\t\t\t\t\tconst enable = apiConfig?.enable ?? true;\r\n\t\t\t\t\tconst modelIds = apiConfig?.model_ids ?? [];\r\n\r\n\t\t\t\t\tif (enable) {\r\n\t\t\t\t\t\tif (modelIds.length > 0) {\r\n\t\t\t\t\t\t\tconst modelList = {\r\n\t\t\t\t\t\t\t\tobject: 'list',\r\n\t\t\t\t\t\t\t\tdata: modelIds.map((modelId) => ({\r\n\t\t\t\t\t\t\t\t\tid: modelId,\r\n\t\t\t\t\t\t\t\t\tname: modelId,\r\n\t\t\t\t\t\t\t\t\towned_by: 'openai',\r\n\t\t\t\t\t\t\t\t\topenai: { id: modelId },\r\n\t\t\t\t\t\t\t\t\turlIdx: idx\r\n\t\t\t\t\t\t\t\t}))\r\n\t\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\t\trequests.push(\r\n\t\t\t\t\t\t\t\t(async () => {\r\n\t\t\t\t\t\t\t\t\treturn modelList;\r\n\t\t\t\t\t\t\t\t})()\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\trequests.push(\r\n\t\t\t\t\t\t\t\t(async () => {\r\n\t\t\t\t\t\t\t\t\treturn await getOpenAIModelsDirect(url, OPENAI_API_KEYS[idx])\r\n\t\t\t\t\t\t\t\t\t\t.then((res) => {\r\n\t\t\t\t\t\t\t\t\t\t\treturn res;\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t\t.catch((err) => {\r\n\t\t\t\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\t\t\t\tobject: 'list',\r\n\t\t\t\t\t\t\t\t\t\t\t\tdata: [],\r\n\t\t\t\t\t\t\t\t\t\t\t\turlIdx: idx\r\n\t\t\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t})()\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\trequests.push(\r\n\t\t\t\t\t\t\t(async () => {\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\tobject: 'list',\r\n\t\t\t\t\t\t\t\t\tdata: [],\r\n\t\t\t\t\t\t\t\t\turlIdx: idx\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t})()\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tconst responses = await Promise.all(requests);\r\n\r\n\t\t\tfor (const idx in responses) {\r\n\t\t\t\tconst response = responses[idx];\r\n\t\t\t\tconst apiConfig = OPENAI_API_CONFIGS[idx.toString()] ?? {};\r\n\r\n\t\t\t\tlet models = Array.isArray(response) ? response : (response?.data ?? []);\r\n\t\t\t\tmodels = models.map((model) => ({ ...model, openai: { id: model.id }, urlIdx: idx }));\r\n\r\n\t\t\t\tconst prefixId = apiConfig.prefix_id;\r\n\t\t\t\tif (prefixId) {\r\n\t\t\t\t\tfor (const model of models) {\r\n\t\t\t\t\t\tmodel.id = `${prefixId}.${model.id}`;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlocalModels = localModels.concat(models);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tmodels = models.concat(\r\n\t\t\tlocalModels.map((model) => ({\r\n\t\t\t\t...model,\r\n\t\t\t\tname: model?.name ?? model?.id,\r\n\t\t\t\tdirect: true\r\n\t\t\t}))\r\n\t\t);\r\n\r\n\t\t// Remove duplicates\r\n\t\tconst modelsMap = {};\r\n\t\tfor (const model of models) {\r\n\t\t\tmodelsMap[model.id] = model;\r\n\t\t}\r\n\r\n\t\tmodels = Object.values(modelsMap);\r\n\t}\r\n\r\n\treturn models;\r\n};\r\n\r\ntype ChatCompletedForm = {\r\n\tmodel: string;\r\n\tmessages: string[];\r\n\tchat_id: string;\r\n\tsession_id: string;\r\n};\r\n\r\nexport const chatCompleted = async (token: string, body: ChatCompletedForm) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/chat/completed`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t},\r\n\t\tbody: JSON.stringify(body)\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = err;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\ntype ChatActionForm = {\r\n\tmodel: string;\r\n\tmessages: string[];\r\n\tchat_id: string;\r\n};\r\n\r\nexport const chatAction = async (token: string, action_id: string, body: ChatActionForm) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/chat/actions/${action_id}`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t},\r\n\t\tbody: JSON.stringify(body)\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = err;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const stopTask = async (token: string, id: string) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/tasks/stop/${id}`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = err;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const getTaskConfig = async (token: string = '') => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/config`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\terror = err;\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const updateTaskConfig = async (token: string, config: object) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/config/update`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t},\r\n\t\tbody: JSON.stringify(config)\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = err;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const generateTitle = async (\r\n\ttoken: string = '',\r\n\tmodel: string,\r\n\tmessages: string[],\r\n\tchat_id?: string\r\n) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/title/completions`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tmodel: model,\r\n\t\t\tmessages: messages,\r\n\t\t\t...(chat_id && { chat_id: chat_id })\r\n\t\t})\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res?.choices[0]?.message?.content.replace(/[\"']/g, '') ?? 'New Chat';\r\n};\r\n\r\nexport const generateTags = async (\r\n\ttoken: string = '',\r\n\tmodel: string,\r\n\tmessages: string,\r\n\tchat_id?: string\r\n) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/tags/completions`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tmodel: model,\r\n\t\t\tmessages: messages,\r\n\t\t\t...(chat_id && { chat_id: chat_id })\r\n\t\t})\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\ttry {\r\n\t\t// Step 1: Safely extract the response string\r\n\t\tconst response = res?.choices[0]?.message?.content ?? '';\r\n\r\n\t\t// Step 2: Attempt to fix common JSON format issues like single quotes\r\n\t\tconst sanitizedResponse = response.replace(/['‘’`]/g, '\"'); // Convert single quotes to double quotes for valid JSON\r\n\r\n\t\t// Step 3: Find the relevant JSON block within the response\r\n\t\tconst jsonStartIndex = sanitizedResponse.indexOf('{');\r\n\t\tconst jsonEndIndex = sanitizedResponse.lastIndexOf('}');\r\n\r\n\t\t// Step 4: Check if we found a valid JSON block (with both `{` and `}`)\r\n\t\tif (jsonStartIndex !== -1 && jsonEndIndex !== -1) {\r\n\t\t\tconst jsonResponse = sanitizedResponse.substring(jsonStartIndex, jsonEndIndex + 1);\r\n\r\n\t\t\t// Step 5: Parse the JSON block\r\n\t\t\tconst parsed = JSON.parse(jsonResponse);\r\n\r\n\t\t\t// Step 6: If there's a \"tags\" key, return the tags array; otherwise, return an empty array\r\n\t\t\tif (parsed && parsed.tags) {\r\n\t\t\t\treturn Array.isArray(parsed.tags) ? parsed.tags : [];\r\n\t\t\t} else {\r\n\t\t\t\treturn [];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If no valid JSON block found, return an empty array\r\n\t\treturn [];\r\n\t} catch (e) {\r\n\t\t// Catch and safely return empty array on any parsing errors\r\n\t\tconsole.error('Failed to parse response: ', e);\r\n\t\treturn [];\r\n\t}\r\n};\r\n\r\nexport const generateEmoji = async (\r\n\ttoken: string = '',\r\n\tmodel: string,\r\n\tprompt: string,\r\n\tchat_id?: string\r\n) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/emoji/completions`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tmodel: model,\r\n\t\t\tprompt: prompt,\r\n\t\t\t...(chat_id && { chat_id: chat_id })\r\n\t\t})\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\tconst response = res?.choices[0]?.message?.content.replace(/[\"']/g, '') ?? null;\r\n\r\n\tif (response) {\r\n\t\tif (/\\p{Extended_Pictographic}/u.test(response)) {\r\n\t\t\treturn response.match(/\\p{Extended_Pictographic}/gu)[0];\r\n\t\t}\r\n\t}\r\n\r\n\treturn null;\r\n};\r\n\r\nexport const generateQueries = async (\r\n\ttoken: string = '',\r\n\tmodel: string,\r\n\tmessages: object[],\r\n\tprompt: string,\r\n\ttype?: string = 'web_search'\r\n) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/queries/completions`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tmodel: model,\r\n\t\t\tmessages: messages,\r\n\t\t\tprompt: prompt,\r\n\t\t\ttype: type\r\n\t\t})\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\t// Step 1: Safely extract the response string\r\n\tconst response = res?.choices[0]?.message?.content ?? '';\r\n\r\n\ttry {\r\n\t\tconst jsonStartIndex = response.indexOf('{');\r\n\t\tconst jsonEndIndex = response.lastIndexOf('}');\r\n\r\n\t\tif (jsonStartIndex !== -1 && jsonEndIndex !== -1) {\r\n\t\t\tconst jsonResponse = response.substring(jsonStartIndex, jsonEndIndex + 1);\r\n\r\n\t\t\t// Step 5: Parse the JSON block\r\n\t\t\tconst parsed = JSON.parse(jsonResponse);\r\n\r\n\t\t\t// Step 6: If there's a \"queries\" key, return the queries array; otherwise, return an empty array\r\n\t\t\tif (parsed && parsed.queries) {\r\n\t\t\t\treturn Array.isArray(parsed.queries) ? parsed.queries : [];\r\n\t\t\t} else {\r\n\t\t\t\treturn [];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If no valid JSON block found, return response as is\r\n\t\treturn [response];\r\n\t} catch (e) {\r\n\t\t// Catch and safely return empty array on any parsing errors\r\n\t\tconsole.error('Failed to parse response: ', e);\r\n\t\treturn [response];\r\n\t}\r\n};\r\n\r\nexport const generateAutoCompletion = async (\r\n\ttoken: string = '',\r\n\tmodel: string,\r\n\tprompt: string,\r\n\tmessages?: object[],\r\n\ttype: string = 'search query'\r\n) => {\r\n\tconst controller = new AbortController();\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/auto/completions`, {\r\n\t\tsignal: controller.signal,\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tmodel: model,\r\n\t\t\tprompt: prompt,\r\n\t\t\t...(messages && { messages: messages }),\r\n\t\t\ttype: type,\r\n\t\t\tstream: false\r\n\t\t})\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\tconst response = res?.choices[0]?.message?.content ?? '';\r\n\r\n\ttry {\r\n\t\tconst jsonStartIndex = response.indexOf('{');\r\n\t\tconst jsonEndIndex = response.lastIndexOf('}');\r\n\r\n\t\tif (jsonStartIndex !== -1 && jsonEndIndex !== -1) {\r\n\t\t\tconst jsonResponse = response.substring(jsonStartIndex, jsonEndIndex + 1);\r\n\r\n\t\t\t// Step 5: Parse the JSON block\r\n\t\t\tconst parsed = JSON.parse(jsonResponse);\r\n\r\n\t\t\t// Step 6: If there's a \"queries\" key, return the queries array; otherwise, return an empty array\r\n\t\t\tif (parsed && parsed.text) {\r\n\t\t\t\treturn parsed.text;\r\n\t\t\t} else {\r\n\t\t\t\treturn '';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// If no valid JSON block found, return response as is\r\n\t\treturn response;\r\n\t} catch (e) {\r\n\t\t// Catch and safely return empty array on any parsing errors\r\n\t\tconsole.error('Failed to parse response: ', e);\r\n\t\treturn response;\r\n\t}\r\n};\r\n\r\nexport const generateMoACompletion = async (\r\n\ttoken: string = '',\r\n\tmodel: string,\r\n\tprompt: string,\r\n\tresponses: string[]\r\n) => {\r\n\tconst controller = new AbortController();\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/tasks/moa/completions`, {\r\n\t\tsignal: controller.signal,\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tmodel: model,\r\n\t\t\tprompt: prompt,\r\n\t\t\tresponses: responses,\r\n\t\t\tstream: true\r\n\t\t})\r\n\t}).catch((err) => {\r\n\t\tconsole.log(err);\r\n\t\terror = err;\r\n\t\treturn null;\r\n\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn [res, controller];\r\n};\r\n\r\nexport const getPipelinesList = async (token: string = '') => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/pipelines/list`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\terror = err;\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\tlet pipelines = res?.data ?? [];\r\n\treturn pipelines;\r\n};\r\n\r\nexport const uploadPipeline = async (token: string, file: File, urlIdx: string) => {\r\n\tlet error = null;\r\n\r\n\t// Create a new FormData object to handle the file upload\r\n\tconst formData = new FormData();\r\n\tformData.append('file', file);\r\n\tformData.append('urlIdx', urlIdx);\r\n\r\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/pipelines/upload`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t\t// 'Content-Type': 'multipart/form-data' is not needed as Fetch API will set it automatically\r\n\t\t},\r\n\t\tbody: formData\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = err;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const downloadPipeline = async (token: string, url: string, urlIdx: string) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/pipelines/add`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\turl: url,\r\n\t\t\turlIdx: urlIdx\r\n\t\t})\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = err;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const deletePipeline = async (token: string, id: string, urlIdx: string) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/pipelines/delete`, {\r\n\t\tmethod: 'DELETE',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tid: id,\r\n\t\t\turlIdx: urlIdx\r\n\t\t})\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = err;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const getPipelines = async (token: string, urlIdx?: string) => {\r\n\tlet error = null;\r\n\r\n\tconst searchParams = new URLSearchParams();\r\n\tif (urlIdx !== undefined) {\r\n\t\tsearchParams.append('urlIdx', urlIdx);\r\n\t}\r\n\r\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/v1/pipelines/?${searchParams.toString()}`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\terror = err;\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\tlet pipelines = res?.data ?? [];\r\n\treturn pipelines;\r\n};\r\n\r\nexport const getPipelineValves = async (token: string, pipeline_id: string, urlIdx: string) => {\r\n\tlet error = null;\r\n\r\n\tconst searchParams = new URLSearchParams();\r\n\tif (urlIdx !== undefined) {\r\n\t\tsearchParams.append('urlIdx', urlIdx);\r\n\t}\r\n\r\n\tconst res = await fetch(\r\n\t\t`${WEBUI_BASE_URL}/api/v1/pipelines/${pipeline_id}/valves?${searchParams.toString()}`,\r\n\t\t{\r\n\t\t\tmethod: 'GET',\r\n\t\t\theaders: {\r\n\t\t\t\tAccept: 'application/json',\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t\t}\r\n\t\t}\r\n\t)\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\terror = err;\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const getPipelineValvesSpec = async (token: string, pipeline_id: string, urlIdx: string) => {\r\n\tlet error = null;\r\n\r\n\tconst searchParams = new URLSearchParams();\r\n\tif (urlIdx !== undefined) {\r\n\t\tsearchParams.append('urlIdx', urlIdx);\r\n\t}\r\n\r\n\tconst res = await fetch(\r\n\t\t`${WEBUI_BASE_URL}/api/v1/pipelines/${pipeline_id}/valves/spec?${searchParams.toString()}`,\r\n\t\t{\r\n\t\t\tmethod: 'GET',\r\n\t\t\theaders: {\r\n\t\t\t\tAccept: 'application/json',\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t\t}\r\n\t\t}\r\n\t)\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\terror = err;\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const updatePipelineValves = async (\r\n\ttoken: string = '',\r\n\tpipeline_id: string,\r\n\tvalves: object,\r\n\turlIdx: string\r\n) => {\r\n\tlet error = null;\r\n\r\n\tconst searchParams = new URLSearchParams();\r\n\tif (urlIdx !== undefined) {\r\n\t\tsearchParams.append('urlIdx', urlIdx);\r\n\t}\r\n\r\n\tconst res = await fetch(\r\n\t\t`${WEBUI_BASE_URL}/api/v1/pipelines/${pipeline_id}/valves/update?${searchParams.toString()}`,\r\n\t\t{\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\tAccept: 'application/json',\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify(valves)\r\n\t\t}\r\n\t)\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = err;\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const getBackendConfig = async () => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/config`, {\r\n\t\tmethod: 'GET',\r\n\t\tcredentials: 'include',\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\terror = err;\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const getChangelog = async () => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/changelog`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\terror = err;\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const getVersionUpdates = async (token: string) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/version/updates`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\terror = err;\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const getModelFilterConfig = async (token: string) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/config/model/filter`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\terror = err;\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const updateModelFilterConfig = async (\r\n\ttoken: string,\r\n\tenabled: boolean,\r\n\tmodels: string[]\r\n) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/config/model/filter`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tenabled: enabled,\r\n\t\t\tmodels: models\r\n\t\t})\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\terror = err;\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const getWebhookUrl = async (token: string) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/webhook`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\terror = err;\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res.url;\r\n};\r\n\r\nexport const updateWebhookUrl = async (token: string, url: string) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/webhook`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\turl: url\r\n\t\t})\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\terror = err;\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res.url;\r\n};\r\n\r\nexport const getCommunitySharingEnabledStatus = async (token: string) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/community_sharing`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\terror = err;\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const toggleCommunitySharingEnabledStatus = async (token: string) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/community_sharing/toggle`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\terror = err.detail;\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const getModelConfig = async (token: string): Promise<GlobalModelConfig> => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/config/models`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\terror = err;\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res.models;\r\n};\r\n\r\nexport interface ModelConfig {\r\n\tid: string;\r\n\tname: string;\r\n\tmeta: ModelMeta;\r\n\tbase_model_id?: string;\r\n\tparams: ModelParams;\r\n}\r\n\r\nexport interface ModelMeta {\r\n\tdescription?: string;\r\n\tcapabilities?: object;\r\n\tprofile_image_url?: string;\r\n}\r\n\r\nexport interface ModelParams {}\r\n\r\nexport type GlobalModelConfig = ModelConfig[];\r\n\r\nexport const updateModelConfig = async (token: string, config: GlobalModelConfig) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${WEBUI_BASE_URL}/api/config/models`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tmodels: config\r\n\t\t})\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\terror = err;\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n"],"names":["getModels","token","connections","base","error","res","WEBUI_BASE_URL","err","models","localModels","OPENAI_API_BASE_URLS","OPENAI_API_KEYS","OPENAI_API_CONFIGS","requests","idx","url","apiConfig","enable","modelIds","modelList","modelId","getOpenAIModelsDirect","responses","response","model","prefixId","modelsMap","chatCompleted","body","chatAction","action_id","stopTask","id","getTaskConfig","updateTaskConfig","config","generateTags","messages","chat_id","sanitizedResponse","_b","_a","jsonStartIndex","jsonEndIndex","jsonResponse","parsed","e","generateEmoji","prompt","generateAutoCompletion","type","controller","generateMoACompletion","getPipelinesList","uploadPipeline","file","urlIdx","formData","downloadPipeline","deletePipeline","getPipelines","searchParams","getPipelineValves","pipeline_id","getPipelineValvesSpec","updatePipelineValves","valves","getBackendConfig","getChangelog","getVersionUpdates","getWebhookUrl","updateWebhookUrl"],"mappings":"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"}